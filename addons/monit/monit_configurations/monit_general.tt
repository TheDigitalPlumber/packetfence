set httpd port 2812 and
    use address localhost  # only accept connection from localhost (drop if you use M/Monit)
    allow localhost        # allow localhost to connect to the server and

set daemon 2    # Monitor resources every 2 seconds (1 cycle is 2 seconds)
set logfile syslog facility log_daemon

[% IF MAILSERVER %]
set mailserver [% MAILSERVER %]
[% ELSE %]
set mailserver [% ALERTING_CONF.smtpserver %]
  [% IF ALERTING_CONF.smtp_port %] PORT [% ALERTING_CONF.smtp_port %] [% END %]
  [% IF ALERTING_CONF.smtp_username %] USERNAME '[% ALERTING_CONF.smtp_username %]' [% END %]
  [% IF ALERTING_CONF.smtp_password %] PASSWORD '[% ALERTING_CONF.smtp_password %]' [% END %]
  [% IF ALERTING_CONF.smtp_encryption != "none" %] USING SSL [% END %]
[% END %]

set mail-format {
    from: [% SENDER %]
    subject: [% SUBJECT_IDENTIFIER %] | Monit Alert -- $EVENT on resource '$SERVICE'
    message:
Date:        $DATE
Host:        $HOST
Event:       $EVENT
Resource:    $SERVICE
Action:      $ACTION

Description: $DESCRIPTION


A copy of this alert has been sent to the PacketFence support team.
}

# - Do not alert on 'nonexist' because we alert on 'restart'
# - Do not alert on 'pid' because we alert on 'restart
[% FOREACH email IN EMAILS %]
    set alert [% email %] but not on { nonexist pid connection }
    set alert [% email %] { exec } with reminder on 1 cycle
[% END %]


set limits {
   programOutput:     20 MB,    # check program's output truncate limit
   sendExpectBuffer:  256 B,    # limit for send/expect protocol test
   fileContentBuffer: 512 B,    # limit for file content test
   httpContentBuffer: 1 MB,     # limit for HTTP content test
   networkTimeout:    5 seconds # timeout for network I/O
}
